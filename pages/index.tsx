import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.scss'
import { Box, Flex } from "@chakra-ui/react";
import { MotionBox } from '@components/charka-motion';
import { FC, ReactNode, useState } from "react";
import { AnimatePresence } from "framer-motion";

const transition_timefunc = [0.88,-0.07, 0.22, 1.01];

const Header = () => {
    return <Box w={"100%"} h={"80px"} bg={"#000"} position={"sticky"} top={0}>
        <svg height={"100%"} viewBox="0.00 200.00 1500.00 1000.00" xmlns="http://www.w3.org/2000/svg" xmlnsXlink="http://www.w3.org/1999/xlink">
            <g strokeLinecap="round" id="Layer_2">
                <path stroke={"#fff"} strokeWidth={25} d="M499.03,511.10 C501.56,510.29 508.63,508.04 511.29,506.98 C514.80,505.56 519.99,502.16 522.66,499.28 C526.27,495.33 538.09,479.32 540.13,475.89 C543.86,469.53 547.67,455.76 548.70,448.60 C549.19,445.08 549.41,437.08 549.25,433.76 C549.03,429.56 547.96,423.34 546.86,419.45 C545.82,415.90 543.13,409.22 541.58,406.46 C540.01,403.71 535.23,397.32 532.63,394.50 C527.71,389.23 515.98,381.14 509.13,377.75 C503.24,374.86 487.33,370.05 480.29,368.96 C474.32,368.06 458.43,367.66 452.13,368.41 C445.71,369.21 429.98,373.63 424.51,376.40 C421.42,377.99 414.20,382.94 411.30,385.47 C408.36,388.08 403.24,394.10 401.47,397.28 C399.65,400.58 396.90,407.37 395.91,411.02 C394.93,414.72 393.78,422.67 393.80,426.23 C393.88,433.54 395.35,445.23 397.15,455.78 C398.43,462.51 401.26,473.83 402.74,479.12 C405.02,486.77 420.40,526.03 425.55,538.70 C439.04,571.16 470.56,648.04 476.89,665.87 C479.88,674.99 488.39,705.56 492.51,722.57 C497.94,746.49 500.57,762.23 501.56,778.26 C502.12,786.50 501.41,796.21 499.96,807.04 C498.53,816.70 495.19,830.68 492.25,837.35 C489.36,843.84 480.36,856.86 475.23,861.95 C470.02,867.07 458.12,875.49 451.51,878.40 C448.14,879.86 441.16,882.26 437.66,883.11 C433.52,884.10 427.51,884.85 423.16,884.92 C415.49,885.01 400.80,882.51 393.80,879.86 C387.28,877.35 373.54,869.80 368.16,865.71 C362.24,861.17 350.41,849.90 346.27,845.03 C341.46,839.33 331.49,824.26 328.60,818.56 C325.04,811.48 319.88,795.43 319.46,788.93 C319.24,785.23 319.59,778.08 320.21,774.71 C320.97,770.75 323.10,764.87 325.15,761.07 C328.63,754.72 338.38,742.95 344.54,737.61 C350.36,732.60 362.38,725.17 369.93,721.82 C384.76,715.29 402.87,710.12 406.95,709.00" strokeOpacity="1.00" strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M581.50,745.21 C584.21,745.82 591.24,747.33 594.95,747.31 C597.93,747.28 605.97,745.70 609.07,744.40 C612.30,743.00 617.52,738.69 619.41,735.90 C621.35,732.96 623.58,726.28 624.19,722.13 C625.16,715.30 625.56,699.69 624.53,694.40 C624.01,691.83 621.75,684.68 620.49,682.42 C619.13,680.05 614.47,675.00 612.15,673.43 C609.74,671.84 602.75,669.16 599.40,668.63 C596.99,668.28 589.76,668.41 586.38,668.95 C580.56,669.91 566.39,675.90 560.74,679.74 C554.43,684.05 543.96,693.52 539.32,699.55 C536.91,702.70 532.73,709.12 530.84,712.60 C527.48,718.88 522.88,734.61 522.37,741.39 C521.90,748.08 524.18,763.82 526.44,769.82 C527.75,773.23 530.79,779.44 532.59,782.43 C534.75,785.97 538.50,790.77 541.56,793.79 C544.37,796.53 550.78,801.44 553.48,802.92 C556.20,804.39 563.63,806.94 567.05,807.55 C570.98,808.22 577.28,808.06 581.39,807.19 C585.07,806.38 592.79,803.47 596.26,801.60 C601.15,798.92 613.41,789.08 618.22,784.01 C622.94,779.00 633.36,765.06 637.15,758.86 C640.81,752.84 648.07,737.94 650.25,732.43 C653.08,725.22 657.35,709.51 657.94,703.44 C658.31,699.22 657.79,694.61 656.71,692.16 C654.73,694.05 652.93,697.21 651.69,701.26 C649.96,707.03 644.56,748.37 642.49,765.43 C641.78,772.31 640.47,789.41 640.47,797.16 C640.61,804.95 641.75,822.23 642.36,826.15 C643.05,830.41 645.12,837.27 647.38,841.13 C647.56,841.44 649.68,844.81 650.48,846.11 C656.52,845.47 661.99,844.47 664.83,842.53 C665.53,842.04 667.93,839.86 668.78,839.10"  strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M696.80,691.73 C695.71,693.71 690.35,709.97 688.08,719.84 C687.30,723.27 684.13,740.20 682.87,747.97 C681.81,755.79 680.23,771.63 679.83,780.49 C679.63,789.17 679.78,804.76 679.91,811.77 C680.02,815.47 680.79,823.09 681.52,826.05 C682.98,831.71 687.51,840.51 689.01,842.02 C690.18,843.16 693.72,845.38 695.40,846.00 C697.35,846.67 700.51,847.01 702.54,846.82 C706.46,846.37 713.48,843.99 716.72,842.17 C723.04,838.57 733.88,830.01 739.69,824.25 C744.91,819.07 753.67,809.03 758.99,802.04 C763.29,796.13 771.93,783.30 775.26,777.42 C777.68,773.14 785.57,757.34 788.23,751.06 C791.13,744.03 794.21,731.97 795.40,723.30 C795.74,720.81 796.74,711.86 797.08,708.61 C797.38,705.81 796.90,702.44 796.66,701.18 C793.59,709.85 792.43,715.38 791.22,722.98 C789.60,734.13 785.87,761.55 783.77,777.83 C779.70,814.46 771.99,886.22 768.37,921.35 C766.47,940.14 762.95,974.68 761.33,990.43 C760.00,1003.07 756.66,1034.18 754.48,1043.56 C753.79,1046.48 751.83,1053.44 750.44,1056.53 C748.71,1060.31 745.21,1065.90 743.53,1067.22 C741.24,1068.94 734.62,1070.09 731.29,1069.36 C729.01,1068.82 722.38,1065.47 719.08,1063.24 C713.94,1059.72 702.01,1047.79 697.84,1042.28 C693.38,1036.36 685.59,1023.28 683.23,1016.11 C681.92,1012.01 681.25,1006.44 681.66,1002.63 C681.98,999.92 683.66,993.03 684.98,990.22 C688.17,983.59 694.59,975.13 700.59,968.36 C720.97,945.69 766.74,894.95 792.12,866.88 C801.62,856.22 828.32,825.83 833.95,818.41 C836.14,815.51 844.75,801.91 846.53,798.77 C850.30,791.90 858.01,776.75 861.27,769.81 C865.61,760.05 867.40,751.11 867.88,748.46"  strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M868.15,727.52 C867.95,719.63 867.47,705.33 867.35,705.01 C867.17,704.56 866.59,703.71 865.63,702.46 C857.32,722.71 849.93,742.89 845.85,758.79 C844.23,765.86 841.45,780.71 840.26,788.56 C839.24,796.70 837.64,813.85 837.07,822.46 C836.70,830.02 836.33,845.69 838.54,851.22 C838.84,851.93 840.47,855.15 841.03,855.78 C842.18,857.01 845.73,859.35 847.32,859.72 C849.23,860.13 852.39,859.76 854.24,859.03 C857.83,857.53 864.28,853.66 867.62,851.05 C872.13,847.48 883.75,835.38 888.02,829.65 C892.32,823.84 900.51,810.60 903.38,804.78 C906.15,799.10 912.91,782.23 914.26,778.08 C916.82,770.14 919.14,758.46 920.23,748.44 C922.19,726.88 922.67,713.58 922.59,706.89 C922.45,720.58 921.96,752.19 921.62,770.11 C920.94,787.19 919.65,819.00 919.27,834.94 C919.22,843.37 919.61,861.21 919.79,861.87 C920.14,863.12 921.31,865.09 922.14,866.08 C923.80,865.38 925.73,861.47 927.31,855.48 C927.82,853.46 928.66,850.11 929.00,848.79"  strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M962.63,707.31 C962.58,737.70 962.48,802.75 962.43,837.40 C962.43,840.08 962.42,843.96 962.42,845.16 C961.09,838.37 961.37,826.14 961.58,818.45 C962.01,809.50 963.39,791.92 964.92,784.86 C966.29,778.67 970.89,764.21 973.82,756.91 C976.95,749.17 983.73,737.42 988.39,731.37 C992.39,726.22 1004.53,716.08 1008.80,713.77 C1011.57,712.30 1018.13,710.54 1022.78,709.73 C1027.00,709.01 1035.70,707.99 1038.52,707.89 C1047.33,707.61 1054.84,709.85 1057.11,711.10"  strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M1065.92,713.21 C1066.72,713.25 1067.25,713.18 1067.52,713.00 C1067.92,712.72 1069.39,709.99 1069.92,709.00 C1065.96,712.86 1063.77,715.37 1061.88,718.48 C1059.36,722.72 1053.25,741.17 1052.00,745.47 C1049.59,753.82 1046.53,770.33 1045.65,778.50 C1044.95,785.10 1044.21,801.93 1043.95,809.74 C1043.84,817.23 1044.06,834.32 1044.42,842.85 C1044.88,850.14 1046.01,865.97 1047.27,870.62 C1048.07,873.47 1050.90,874.48 1052.13,874.65 C1053.71,872.19 1058.28,865.07 1059.77,862.04 C1063.13,855.14 1065.85,842.44 1066.72,838.26"  strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M1078.73,667.31 C1078.27,666.35 1078.01,665.72 1077.93,665.42 C1077.74,664.63 1078.43,662.44 1079.17,661.78 C1079.94,661.12 1082.51,659.99 1084.33,659.31 C1081.40,662.62 1079.40,665.49 1078.19,669.07 C1077.03,672.66 1076.09,679.67 1076.90,682.91 C1077.12,683.75 1078.45,686.95 1078.91,688.10 C1080.60,687.82 1083.13,686.61 1084.54,685.18 C1085.59,684.10 1088.00,676.64 1088.39,673.62 C1088.62,671.55 1088.63,667.31 1088.21,665.91 C1087.67,664.21 1085.46,661.07 1083.97,659.77 C1082.12,658.21 1076.85,654.73 1075.52,653.84"  strokeLinejoin="round"/>
                <path stroke={"#fff"} strokeWidth={25} d="M1155.80,853.58 C1154.80,855.19 1152.04,859.61 1151.80,860.11 C1151.64,860.43 1151.64,860.64 1151.80,860.74 C1153.88,851.85 1155.92,845.74 1159.38,837.67 C1172.33,808.63 1198.51,749.03 1210.70,719.68 C1222.07,691.06 1245.37,632.25 1257.30,602.06 C1258.14,600.10 1258.89,598.13 1259.09,597.85 C1259.70,597.01 1261.36,595.91 1262.41,595.45 C1267.24,605.51 1270.25,612.22 1272.56,620.61 C1273.76,625.12 1276.84,639.42 1278.23,647.21 C1283.00,678.96 1291.10,740.80 1297.11,774.59 C1300.41,791.65 1307.41,823.93 1310.82,838.92 C1313.22,848.59 1316.70,860.62 1319.76,867.19 C1323.43,875.00 1325.57,877.83 1327.61,879.27 C1319.29,867.72 1300.34,845.23 1289.09,832.45 C1277.39,819.79 1252.71,794.63 1244.21,786.54 C1238.70,781.46 1227.11,771.28 1219.96,765.59 C1213.11,760.31 1200.10,751.41 1194.12,747.58 C1186.35,742.78 1176.09,737.51 1166.36,733.37 C1161.34,731.27 1159.10,730.41 1153.04,728.19 C1149.88,727.05 1144.72,724.98 1143.05,723.37 C1142.77,723.10 1142.39,722.64 1141.90,722.00 C1151.54,716.99 1158.92,713.37 1167.19,709.98 C1182.62,704.01 1208.39,696.02 1226.32,691.14 C1242.84,686.91 1273.84,679.30 1288.33,675.91 C1297.78,673.92 1313.56,671.02 1320.03,670.07 C1341.08,667.43 1383.77,664.32 1385.77,664.38 C1381.07,672.33 1375.06,678.98 1370.00,684.23 C1363.95,690.31 1334.10,715.12 1323.16,724.07 C1294.82,746.96 1240.70,791.12 1214.91,812.39 C1206.99,819.35 1200.10,825.97 1197.13,829.31 C1194.91,831.83 1191.27,836.93 1189.78,841.02 C1189.75,841.10 1188.37,845.32 1187.83,846.85"  strokeLinejoin="round"/>
            </g>
        </svg>
    </Box>
}


const Body = () => {
    return <Flex w={"100%"} flexGrow={1} flexDir={"column"} alignItems={"center"} justifyContent={"center"}>
        <Box fontFamily={"Consolas"} bg={"#222"} color={"#eee"}>
            <Box p={4}>Hi. This is a placeholder for something big coming.</Box>
            <Flex gap={"5px"} p={5} flexDir={"column"} alignItems={"center"} bg={"#333"} justifyContent={"stretch"}>
                <Box mt={"-5px"}>But for now, how about checking other links?</Box>
                <Anchor
                    to={"https://github.com/sayuriu"}
                    label={"GitHub"}
                    icon={
                        <SVG>
                            <path d="M26.484 91.806c-.133.3-.605.39-1.035.185-.44-.196-.685-.605-.543-.906.13-.31.603-.395 1.04-.188.44.197.69.61.537.91zm2.446 2.729c-.287.267-.85.143-1.232-.28-.396-.42-.47-.983-.177-1.254.298-.266.844-.14 1.24.28.394.426.472.984.17 1.255zM31.312 98.012c-.37.258-.976.017-1.35-.52-.37-.538-.37-1.183.01-1.44.373-.258.97-.025 1.35.507.368.545.368 1.19-.01 1.452zm3.261 3.361c-.33.365-1.036.267-1.552-.23-.527-.487-.674-1.18-.343-1.544.336-.366 1.045-.264 1.564.23.527.486.686 1.18.333 1.543zm4.5 1.951c-.147.473-.825.688-1.51.486-.683-.207-1.13-.76-.99-1.238.14-.477.823-.7 1.512-.485.683.206 1.13.756.988 1.237zm4.943.361c.017.498-.563.91-1.28.92-.723.017-1.308-.387-1.315-.877 0-.503.568-.91 1.29-.924.717-.013 1.306.387 1.306.88zm4.598-.782c.086.485-.413.984-1.126 1.117-.7.13-1.35-.172-1.44-.653-.086-.498.422-.997 1.122-1.126.714-.123 1.354.17 1.444.663zm0 0"/>
                            <path fillRule="evenodd" clipRule="evenodd" d="M64 5.103c-33.347 0-60.388 27.035-60.388 60.388 0 26.682 17.303 49.317 41.297 57.303 3.017.56 4.125-1.31 4.125-2.905 0-1.44-.056-6.197-.082-11.243-16.8 3.653-20.345-7.125-20.345-7.125-2.747-6.98-6.705-8.836-6.705-8.836-5.48-3.748.413-3.67.413-3.67 6.063.425 9.257 6.223 9.257 6.223 5.386 9.23 14.127 6.562 17.573 5.02.542-3.903 2.107-6.568 3.834-8.076-13.413-1.525-27.514-6.704-27.514-29.843 0-6.593 2.36-11.98 6.223-16.21-.628-1.52-2.695-7.662.584-15.98 0 0 5.07-1.623 16.61 6.19C53.7 35 58.867 34.327 64 34.304c5.13.023 10.3.694 15.127 2.033 11.526-7.813 16.59-6.19 16.59-6.19 3.287 8.317 1.22 14.46.593 15.98 3.872 4.23 6.215 9.617 6.215 16.21 0 23.194-14.127 28.3-27.574 29.796 2.167 1.874 4.097 5.55 4.097 11.183 0 8.08-.07 14.583-.07 16.572 0 1.607 1.088 3.49 4.148 2.897 23.98-7.994 41.263-30.622 41.263-57.294C124.388 32.14 97.35 5.104 64 5.104z"/>
                        </SVG>
                    }
                />
                <Anchor
                    to={"https://www.pixiv.net/en/users/24697420"}
                    label={"Pixiv"}
                    icon={
                        <SVG>
                            <g transform="matrix(0.465102, 0, 0, 0.465102, 5.606805, -364.002197)">
                                <path
                                    fill={"#0096db"}
                                    stroke={"#008cc8"}
                                    strokeWidth={5}
                                    strokeLinecap={"round"}
                                    strokeLinejoin={"round"}
                                    strokeMiterlimit={4}
                                    strokeOpacity={1}
                                    d={"M 138.82 782.654 C 96.254 783.446 44.853 803.004 -12.055 852.435 L 3.102 885.279 L 11.352 880.497 L 11.352 863.56 C 16.247 853.731 23.086 844.69 36.508 838.372 L 36.508 1027.779 L 29.539 1027.779 L 29.602 1034.529 L 76.852 1034.529 L 76.852 1027.966 L 69.758 1027.966 L 69.758 980.216 C 333.496 1039.313 298.05 779.688 138.82 782.654 Z M 136.852 800.904 C 264.368 801.798 267.321 1026.324 69.758 958.997 L 69.758 818.091 C 94.857 805.885 117.322 800.767 136.852 800.904 Z"}
                                />
                            </g>
                        </SVG>
                    }
                />
            </Flex>
        </Box>
    </Flex>
}

const Footer = () => {
    return <Flex fontFamily={"monospace"} color={"#fff"} w={"100%"} h={"60px"} position={"sticky"} bottom={0} justifyContent={"center"} alignItems={"center"}>
        <Box as={"a"} href={"https://github.com/sayuriu/portfolio"}>View source</Box>
    </Flex>
}

interface SVGProps {
    children?: ReactNode;
}
const SVG: FC<SVGProps> = ({ children }) => {
    return <svg height={"30px"} viewBox="0 0 128 128">
        <g fill="#181616">{children}</g>
    </svg>
}

interface AnchorProps {
    to: string;
    children?: ReactNode;
    icon: JSX.Element;
    label: string;
}
const Anchor: FC<AnchorProps> = ({ to, children, icon, label }) => {
    const [isHover, setIsHover] = useState(false);
    return <MotionBox
        position={"relative"}
        width={"80%"}
        as={'a'}
        href={to}
        display={"flex"}
        gap={5}
        marginInline={5}
        animate={{
            paddingTop: "0.5ch",
            paddingBottom: "0.5ch",
            background: "#333"
        }}
        whileHover={{
            paddingTop: "1.5ch",
            paddingBottom: "1.5ch",
            background: "#444"
        }}
        transition={{
            duration: .5,
            ease: transition_timefunc
        }}
        onHoverStart={() => setIsHover(true)}
        onHoverEnd={() => setIsHover(false)}
        overflow={"hidden"}
    >
        <MotionBox
            pl={"3ch"}
            animate={isHover ? {
                opacity: 1,
                x: 0
            } : {
                opacity: 0,
                x: 20
            }}
            transition={{
                duration: .5,
                ease: transition_timefunc
            }}
        >{label}</MotionBox>
        <MotionBox
            position={"absolute"}
            initial={{
                left: "calc(100% - 30px)",
                top: "calc(50% - 15px)",
            }}
            animate={isHover ? {
                scale: 3,
                opacity: .8,
                left: "calc(100% - 30px)",
                top: "calc(50% - 17px)",
            } : {
                scale: 1,
                opacity: 1,
                left: "calc(50% - 15px)",
                top: "calc(50% - 15px)",
            }}
            transition={{
                duration: .5,
                scale: {
                    delay: .1,
                    ease: transition_timefunc
                },
                ease: transition_timefunc
            }}
        >
            {icon}
        </MotionBox>
    </MotionBox>
}

const Main: NextPage = () => {
    return (<Flex bg={"#111"} w={"100%"} h={"100vh"} flexDir={"column"}>
        <Header/>
        <Body/>
        <Footer/>
    </Flex>)
}

export default Main;